import matplotlib.pyplot as plt
import numpy as np
from datetime import datetime, timedelta
import calendar
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters
import json


# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON
def load_data():
    try:
        with open('habits_data.json', 'r', encoding='utf-8') as file:
            return json.load(file)
    except FileNotFoundError:
        return {}


def save_data(data):
    with open('habits_data.json', 'w', encoding='utf-8') as file:
        json.dump(data, file, ensure_ascii=False, indent=4)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context):
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (Reply Keyboard)
    reply_keyboard = [
        ["–ò–ù–§–û", "DEL"]
    ]

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É –∏–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=False)
    )

    # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–≤—ã—á–µ–∫ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    keyboard = [
        [InlineKeyboardButton("üí®", callback_data="habit_kalyan"),
         InlineKeyboardButton("üçª", callback_data="habit_alcohol"),
         InlineKeyboardButton("üí™", callback_data="habit_strength")],
        [InlineKeyboardButton("–ú–µ—Å—è—Ü", callback_data="stat_negative_month"),
         InlineKeyboardButton("–ö–≤–∞—Ä—Ç–∞–ª", callback_data="stat_negative_quarter"),
         InlineKeyboardButton("–ì–æ–¥", callback_data="stat_negative_year")],

        [InlineKeyboardButton("üìö", callback_data="habit_manga"),
         InlineKeyboardButton("üé•", callback_data="habit_anime"),
         InlineKeyboardButton("üéÆ", callback_data="habit_games")],
        [InlineKeyboardButton("–ú–µ—Å—è—Ü", callback_data="stat_entertainment_month"),
         InlineKeyboardButton("–ö–≤–∞—Ä—Ç–∞–ª", callback_data="stat_entertainment_quarter"),
         InlineKeyboardButton("–ì–æ–¥", callback_data="stat_entertainment_year")],

        [InlineKeyboardButton("üöø", callback_data="habit_spraying"),
         InlineKeyboardButton("üíß", callback_data="habit_watering"),
         InlineKeyboardButton("üß∫", callback_data="habit_replanting")],
        [InlineKeyboardButton("–ú–µ—Å—è—Ü", callback_data="stat_plant_month"),
         InlineKeyboardButton("–ö–≤–∞—Ä—Ç–∞–ª", callback_data="stat_plant_quarter"),
         InlineKeyboardButton("–ì–æ–¥", callback_data="stat_plant_year")],

        [InlineKeyboardButton("ü§ß", callback_data="habit_sick"),
         InlineKeyboardButton("üöë", callback_data="habit_doctor"),
         InlineKeyboardButton("üõÅ", callback_data="habit_shower")],
        [InlineKeyboardButton("–ú–µ—Å—è—Ü", callback_data="stat_health_month"),
         InlineKeyboardButton("–ö–≤–∞—Ä—Ç–∞–ª", callback_data="stat_health_quarter"),
         InlineKeyboardButton("–ì–æ–¥", callback_data="stat_health_year")]
    ]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É –∏–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:", reply_markup=InlineKeyboardMarkup(keyboard))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–ù–§–û"
async def show_info(update: Update, context):
    data = load_data().get(str(update.effective_user.id), {})
    date_today = datetime.now().strftime("%Y-%m-%d")
    message = "–ü—Ä–∏–≤—ã—á–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
    habits_today = False

    for habit, dates in data.items():
        if date_today in dates:
            message += f"‚Ä¢ {habit}: {dates[date_today]} —Ä–∞–∑(–∞)\n"
            habits_today = True

    if not habits_today:
        message += "–°–µ–≥–æ–¥–Ω—è –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç."

    await update.message.reply_text(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "DEL"
async def clear_chat(update: Update, context):
    # –û—á–∏—â–∞–µ—Ç –ø–µ—Ä–µ–ø–∏—Å–∫—É, –æ—Ç–ø—Ä–∞–≤–ª—è—è –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await start(update, context)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥ "–ò–ù–§–û" –∏ "DEL" –∏–∑ –ø–∞–Ω–µ–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
async def handle_reply_keyboard(update: Update, context):
    text = update.message.text
    if text == "–ò–ù–§–û":
        await show_info(update, context)
    elif text == "DEL":
        await clear_chat(update, context)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø—Ä–∏–≤—ã—á–∫–∏
async def log_habit(update: Update, context):
    data = load_data()
    habit = update.callback_query.data
    date_today = datetime.now().strftime("%Y-%m-%d")
    user_id = str(update.effective_user.id)

    if user_id not in data:
        data[user_id] = {}
    if habit not in data[user_id]:
        data[user_id][habit] = {}
    if date_today in data[user_id][habit]:
        data[user_id][habit][date_today] += 1
    else:
        data[user_id][habit][date_today] = 1

    save_data(data)
    await update.callback_query.answer(f"–ü—Ä–∏–≤—ã—á–∫–∞ {habit} –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞!")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
async def generate_heatmap(update, context, period, habits, color_map, title):
    data = load_data().get(str(update.effective_user.id), {})
    if not data:
        await update.callback_query.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫.")
        return

    try:
        now = datetime.now()

        if period == "month":
            days_in_period = calendar.monthrange(now.year, now.month)[1]
            start_date = datetime(now.year, now.month, 1)
            period_title = f"{title} ({now.strftime('%B')})"
        elif period == "quarter":
            start_month = (now.month - 1) // 3 * 3 + 1
            start_date = datetime(now.year, start_month, 1)
            days_in_period = 90
            period_title = f"{title} (–¢–µ–∫—É—â–∏–π –∫–≤–∞—Ä—Ç–∞–ª)"
        elif period == "year":
            start_date = datetime(now.year, 1, 1)
            days_in_period = 365
            period_title = f"{title} (–¢–µ–∫—É—â–∏–π –≥–æ–¥)"

        habit_counts = {habit: np.zeros(days_in_period) for habit in habits}

        for habit_key, dates in data.items():
            if habit_key in habits:
                for date_str, count in dates.items():
                    date = datetime.strptime(date_str, "%Y-%m-%d")
                    if start_date <= date < start_date + timedelta(days=days_in_period):
                        day_index = (date - start_date).days
                        habit_counts[habit_key][day_index] = count

        heatmap_data = np.array(list(habit_counts.values()))

        fig, ax = plt.subplots(figsize=(12, 5))
        heatmap = ax.imshow(heatmap_data, cmap=color_map, aspect="auto", interpolation="nearest", vmin=0)

        ax.set_xticks(range(0, days_in_period, max(1, days_in_period // 30)))
        ax.set_xticklabels(range(1, days_in_period + 1, max(1, days_in_period // 30)), rotation=45)
        ax.set_yticks(range(len(habits)))
        ax.set_yticklabels(habits)
        ax.set_title(period_title)
        plt.colorbar(heatmap, label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π")

        for i, habit in enumerate(habits):
            for j in range(days_in_period):
                count = habit_counts[habit][j]
                if count > 0:
                    ax.text(j, i, int(count), ha="center", va="center", color="black")

        ax.grid(which="both", color="gray", linestyle="--", linewidth=0.5)
        ax.set_xticks(np.arange(-0.5, days_in_period, 1), minor=True)
        ax.set_yticks(np.arange(-0.5, len(habits), 1), minor=True)
        ax.grid(which="minor", color="black", linestyle='-', linewidth=0.5)
        ax.tick_params(which="minor", size=0)

        plt.tight_layout()
        heatmap_path = "habit_heatmap.png"
        plt.savefig(heatmap_path)
        await update.callback_query.message.reply_photo(photo=open(heatmap_path, "rb"))
        os.remove(heatmap_path)

        await update.callback_query.answer("–ì—Ä–∞—Ñ–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã: {e}")
        await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏ –ø–µ—Ä–∏–æ–¥–∞
async def stat_negative_month(update: Update, context):
    await generate_heatmap(update, context, "month", ["habit_kalyan", "habit_alcohol", "habit_strength"], "Reds",
                           "–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏")


async def stat_negative_quarter(update: Update, context):
    await generate_heatmap(update, context, "quarter", ["habit_kalyan", "habit_alcohol", "habit_strength"], "Reds",
                           "–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏")


async def stat_negative_year(update: Update, context):
    await generate_heatmap(update, context, "year", ["habit_kalyan", "habit_alcohol", "habit_strength"], "Reds",
                           "–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏")


async def stat_entertainment_month(update: Update, context):
    await generate_heatmap(update, context, "month", ["habit_manga", "habit_anime", "habit_games"], "Blues",
                           "–†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏")


async def stat_entertainment_quarter(update: Update, context):
    await generate_heatmap(update, context, "quarter", ["habit_manga", "habit_anime", "habit_games"], "Blues",
                           "–†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏")


async def stat_entertainment_year(update: Update, context):
    await generate_heatmap(update, context, "year", ["habit_manga", "habit_anime", "habit_games"], "Blues",
                           "–†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏")


async def stat_plant_month(update: Update, context):
    await generate_heatmap(update, context, "month", ["habit_spraying", "habit_watering", "habit_replanting"], "Greens",
                           "–£—Ö–æ–¥ –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏")


async def stat_plant_quarter(update: Update, context):
    await generate_heatmap(update, context, "quarter", ["habit_spraying", "habit_watering", "habit_replanting"],
                           "Greens", "–£—Ö–æ–¥ –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏")


async def stat_plant_year(update: Update, context):
    await generate_heatmap(update, context, "year", ["habit_spraying", "habit_watering", "habit_replanting"], "Greens",
                           "–£—Ö–æ–¥ –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏")


async def stat_health_month(update: Update, context):
    await generate_heatmap(update, context, "month", ["habit_sick", "habit_doctor", "habit_shower"], "Oranges",
                           "–ó–¥–æ—Ä–æ–≤—å–µ")


async def stat_health_quarter(update: Update, context):
    await generate_heatmap(update, context, "quarter", ["habit_sick", "habit_doctor", "habit_shower"], "Oranges",
                           "–ó–¥–æ—Ä–æ–≤—å–µ")


async def stat_health_year(update: Update, context):
    await generate_heatmap(update, context, "year", ["habit_sick", "habit_doctor", "habit_shower"], "Oranges",
                           "–ó–¥–æ—Ä–æ–≤—å–µ")


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    application = Application.builder().token("7789021748:AAGOBcGT-Ef9e8NLDYQ8rk1D9cQtVB4AjTc").build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_reply_keyboard))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–∏–≤—ã—á–µ–∫
    habit_patterns = [
        "habit_kalyan", "habit_alcohol", "habit_strength",
        "habit_manga", "habit_anime", "habit_games",
        "habit_spraying", "habit_watering", "habit_replanting",
        "habit_sick", "habit_doctor", "habit_shower"
    ]
    for pattern in habit_patterns:
        application.add_handler(CallbackQueryHandler(log_habit, pattern=f"^{pattern}$"))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏ –ø–µ—Ä–∏–æ–¥–∞
    application.add_handler(CallbackQueryHandler(stat_negative_month, pattern="^stat_negative_month$"))
    application.add_handler(CallbackQueryHandler(stat_negative_quarter, pattern="^stat_negative_quarter$"))
    application.add_handler(CallbackQueryHandler(stat_negative_year, pattern="^stat_negative_year$"))

    application.add_handler(CallbackQueryHandler(stat_entertainment_month, pattern="^stat_entertainment_month$"))
    application.add_handler(CallbackQueryHandler(stat_entertainment_quarter, pattern="^stat_entertainment_quarter$"))
    application.add_handler(CallbackQueryHandler(stat_entertainment_year, pattern="^stat_entertainment_year$"))

    application.add_handler(CallbackQueryHandler(stat_plant_month, pattern="^stat_plant_month$"))
    application.add_handler(CallbackQueryHandler(stat_plant_quarter, pattern="^stat_plant_quarter$"))
    application.add_handler(CallbackQueryHandler(stat_plant_year, pattern="^stat_plant_year$"))

    application.add_handler(CallbackQueryHandler(stat_health_month, pattern="^stat_health_month$"))
    application.add_handler(CallbackQueryHandler(stat_health_quarter, pattern="^stat_health_quarter$"))
    application.add_handler(CallbackQueryHandler(stat_health_year, pattern="^stat_health_year$"))

    application.run_polling()


if __name__ == '__main__':
    main()
